#!/usr/bin/env python
# Usage {{{1
"""
Import and update the metadata of audio files

usage:
    mdimport [options]

options:
  -h, --help      show this help message and exit
  -p, --playlist  Create playlist.

Must be run after mdexport (metadata.nt file must exist).
"""

# Imports {{{1
from base64 import standard_b64decode
from docopt import docopt
from inform import fatal, os_error, warn
import nestedtext as nt
from metadata import (
    flac_extensions,
    id3_extensions,
    map_filename,
    metadata_filename,
    ogg_extensions,
    playlist_filename,
    use_aggressive_mapping,
)
from mutagen.oggvorbis import (
    OggVorbis as OggMetaData,
    OggVorbisHeaderError as OggNoHeaderError
)
from mutagen.id3 import (
    ID3 as MP3MetaData,
    ID3NoHeaderError as MP3NoHeaderError,
    TIT2, TALB, TPE1, TRCK, TPOS
)
from mutagen.flac import (
    FLAC as FlacMetaData,
    FLACNoHeaderError as FlacNoHeaderError
)
from shlib import to_path, mkdir, mv
from voluptuous import Schema, Invalid, Extra, Required, REMOVE_EXTRA

# Utilities {{{1
# extract_number {{{2
def extract_number(num):
    if num:
        num, _, _ = num.partition('/')
        try:
            int(num)
            return num.strip()
        except ValueError:
            pass

# Metadata Schema {{{1
def expand_fields(value):
    # allows macro values to be defined as a top-level field.
    # allows macro reference to be found anywhere.
    if isinstance(value, str):
        value = value.strip()
        if value[:1] == '@':
            value = settings[value[1:].strip()]
        return value
    if isinstance(value, dict):
        return {k:expand_fields(v) for k, v in value.items()}
    if isinstance(value, list):
        return [expand_fields(v) for v in value]
    raise NotImplementedError(value)

def to_str(arg):
    if isinstance(arg, str):
        return arg.strip()
    raise Invalid('expected text.')

schema = Schema(
    {
        Required('entries'): [{
            Required('encoded filename (do not change)'): str,
            Extra: str,
        }],
    },
    extra = REMOVE_EXTRA
)

# Command Line {{{1
try:
    cmdline = docopt(__doc__)

# Read data file{{{1
    metadata_path = to_path(metadata_filename)
    if not metadata_path.exists():
        fatal("missing, did you run mdexport?", culprit=metadata_filename)
    data = nt.load(metadata_path, top=dict)
    data = expand_fields(data)
    data = schema(data)
    entries = data['entries']

# Main loop {{{1
    files = []
    for entry in entries:
        src = standard_b64decode(entry['encoded filename (do not change)'])
        src = to_path(src.decode('utf-8'))
        if not src.exists():
            warn('encoded file missing, skipping.')
            continue
        ext = src.suffix.lower()
        dest = entry.get('filename')
        artist = entry.get('artist')
        album = entry.get('album')
        disk = entry.get('disk')
        title = entry.get('title')
        track = entry.get('track')
        artist = artist.strip() if artist else ''
        album = album.strip() if album else ''
        disk = extract_number(disk if disk != '1/1' else None)
        title = title.strip() if title else ''
        track = extract_number(track)

        if ext in ogg_extensions:
            MetaData = OggMetaData
            NoHeaderError = OggNoHeaderError
        elif ext in id3_extensions:
            MetaData = MP3MetaData
            NoHeaderError = MP3NoHeaderError
        elif ext in flac_extensions:
            MetaData = FlacMetaData
            NoHeaderError = FlacNoHeaderError
        else:
            warn("unsupported file type; skipping.", culprit=src)
            continue

        # Update the metadata
        try:
            metadata = MetaData(src)
        except NoHeaderError as e:
            metadata = MetaData()

        if ext in id3_extensions:
            if artist:
                metadata["TPE1"] = TPE1(encoding=3, text=artist)
            if album:
                metadata["TALB"] = TALB(encoding=3, text=album)
            if disk:
                metadata["TPOS"] = TPOS(encoding=3, text=disk)
            if title:
                metadata["TIT2"] = TIT2(encoding=3, text=title)
            if track:
                metadata["TRCK"] = TRCK(encoding=3, text=track)
        else:
            if artist:
                metadata['artist'] = artist
            if album:
                metadata['album'] = album
            if disk:
                metadata['discnumber'] = disk
            if title:
                metadata['title'] = title
            if track:
                metadata['tracknumber'] = track
        metadata.save(src)

        # Move the file
        if dest:
            dest = to_path(dest)
            directory = dest.parent
            filename = dest.stem
            if directory:
                mkdir(directory)
            mv(src, dest)
            files.append(dest)
        else:
            files.append(src)

    if cmdline['--playlist']:
        playlist_path = to_path(playlist_filename)
        playlist_path.write_text('\n'.join(str(f) for f in files) + '\n')
        display(f"The playlist has be created as {playlist_filename}.")

except KeyboardInterrupt:
    raise SystemExit('Killed by user')
except OSError as e:
    fatal(os_error(e))
except nt.NestedTextError as e:
    e.terminate()
except Invalid as e:
    fatal(e.msg, culprit=e.path)

