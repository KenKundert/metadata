#!/usr/bin/env python
# Usage {{{1
"""
Export the metadata from audio files

usage:
    mdexport [options] <file>...

options:
  -h, --help           show this help message and exit
  -p, --playlist       Create playlist.
  -a, --album          Add album title to the filename as a directory.
  -A, --artist         Add artist and album title to the filename as directories.
  -m, --map-filenames  Map filenames (downcase, remove spaces, map illegal characters).
"""

# Imports {{{1
from docopt import docopt
from inform import display, fatal, os_error, warn
import nestedtext as nt
from mutagen.oggvorbis import (
    OggVorbis as OggMetaData,
    OggVorbisHeaderError as OggNoHeaderError,
)
from metadata import (
    flac_extensions,
    id3_extensions,
    map_directory,
    map_filename,
    metadata_filename,
    music_extensions,
    ogg_extensions,
    playlist_extension,
    playlist_filename,
    use_aggressive_mapping,
)
from mutagen.id3 import (
    ID3 as MP3MetaData,
    ID3NoHeaderError as MP3NoHeaderError,
    TIT2, TALB, TPE1, TRCK, TPOS
)
from mutagen.flac import (
    FLAC as FlacMetaData,
    FLACNoHeaderError as FlacNoHeaderError,
)
from shlib import to_path, rm
from base64 import standard_b64encode

# Utility functions {{{1
def add_files(processed, new):
    for each in new:
        path = to_path(each)
        if path.is_file():
            ext = path.suffix.lower()
            if ext in music_extensions:
                processed.append(path)
            elif ext == playlist_extension:
                add_files(processed, path.read_text().split('\n'))
            else:
                warn(f"unsupported file type {ext}; skipped.", culprit=path)
        elif isDir(path):
            add_files(processed, sorted(ls(path, '*')))

# Command Line {{{1
try:
    cmdline = docopt(__doc__)

    files = []
    add_files(files, cmdline['<file>'])
    if not files:
        display("No files to process.")
        raise SystemExit()
    if cmdline['--map-filenames']:
        use_aggressive_mapping()

# Main loop {{{1
    entries = []
    seen = set()
    for path in files:
        entry = {}

        ext = path.suffix.lower()
        if ext in ogg_extensions:
            MetaData = OggMetaData
            NoHeaderError = OggNoHeaderError
        elif ext in id3_extensions:
            MetaData = MP3MetaData
            NoHeaderError = MP3NoHeaderError
        elif ext in flac_extensions:
            MetaData = FlacMetaData
            NoHeaderError = FlacNoHeaderError
        else:
            warn("unsupported file type; skipped.", culprit=path)
            continue

        try:
            metadata = MetaData(path)
        except NoHeaderError:
            metadata = MetaData()

        if ext in id3_extensions:
            artist = metadata.get("TPE1", [None])[0]
            album = metadata.get("TALB", [None])[0]
            disk = metadata.get("TPOS", [None])[0]
            title = metadata.get("TIT2", [None])[0]
            track = metadata.get("TRCK", [None])[0]
        else:
            artist = metadata.get('artist', [None])[0]
            album = metadata.get('album', [None])[0]
            disk = metadata.get('discnumber', [None])[0]
            title = metadata.get('title', [None])[0]
            track = metadata.get('tracknumber', [None])[0]

        # create proposed filename
        if track:
            track = f"{track:>02}"
            if disk:
                disk = str(disk)
                filename = f'{disk}.{track} {title}{ext}'
            else:
                filename = f'{track} {title}{ext}'
        elif title:
            filename = f'{title}{ext}'
        else:
            filename = None

        # extract directory
        if cmdline['--artist']:
            directory = to_path(map_directory(artist), map_directory(album))
        elif cmdline['--album']:
            directory = map_directory(album)
        else:
            directory = path.parent

        entry['original filename'] = str(path)
        encoded = standard_b64encode(str(path).encode('utf-8'))
        entry['encoded filename (do not change)'] = encoded.decode('ascii')
        if title:
            entry['title'] = title
        if artist:
            entry['artist'] = artist
        if album:
            entry['album'] = album
        if disk:
            entry['disk'] = disk
        if track:
            entry['track'] = track
        if filename:
            filename = map_filename(filename)
            entry['filename'] = str(directory / filename)
            if entry['filename'] in seen:
                warn('duplicate filename.', culprit=entry['filename'])
                seen.add(entry['filename'])
        entries.append(entry)

    nt.dump(dict(entries=entries), metadata_filename)
    display(f"The file '{metadata_filename}' has be created.")
    display("Edit this file and run mdimport to change the metadata.")
    if cmdline['--playlist']:
        playlist_path = to_path(playlist_filename)
        playlist_path.write_text('\n'.join(str(f) for f in files) + '\n')
        display(f"The playlist has be created as {playlist_filename}.")

except KeyboardInterrupt:
    raise SystemExit('Killed by user')
except OSError as e:
    fatal(os_error(e))
except nt.NestedTextError as e:
    e.terminate()
